chunk = { global };

global = variable_definition
       | function_definition
       ;

variable_declaration = type identifier ;

variable_definition = variable_declaration [ "=" expression ] { "," identifier [ "=" expression ] } ;

function_definition = type identifier "(" [ variable_declaration { "," variable_declaration } ] ")" "{" { statement } "}" ;

modifier = "mut"
          | "ref"
          ;

type = "void"
     | "bool"
     | "int"
     | "real"
     | "string"
     | type "(" [ type { "," type }] ")"
     | modifier type
     | intrinsic_expression
     ;

statement = variable_definition ';'
          | function_definition
          | expression ';'
          | id ":"
          | "if" "(" expression ")" statement [ "else" statement ]
          | "while" "(" expression ")" statement
          | "return" [ expression ] ';'
          | "break" [ id ] ';'
          | "continue" [ id ] ';'
          | "{" { statement } "}"
          ;

expression = assignment_expression ;

assignment_expression = logical_expression "=" assignment_expression
                      | logical_expression "+=" assignment_expression
                      | logical_expression "-=" assignment_expression
                      | logical_expression "*=" assignment_expression
                      | logical_expression "/=" assignment_expression
                      | logical_expression "%=" assignment_expression
                      | logical_expression "<<=" assignment_expression
                      | logical_expression ">>=" assignment_expression
                      | logical_expression ">>>=" assignment_expression
                      | logical_expression "&=" assignment_expression
                      | logical_expression "|=" assignment_expression
                      | logical_expression "^=" assignment_expression
                      | logical_expression
                      ;

logical_expression = logical_expression "&&" relational_expression
                   | logical_expression "||" relational_expression
                   | relational_expression
                   ;

relational_expression = relational_expression "==" bitwise_expression
                      | relational_expression "!=" bitwise_expression
                      | relational_expression "<=" bitwise_expression
                      | relational_expression ">=" bitwise_expression
                      | relational_expression "<" bitwise_expression
                      | relational_expression ">" bitwise_expression
                      | bitwise_expression
                      ;

bitwise_expression = bitwise_expression "<<" additive_expression
                   | bitwise_expression ">>" additive_expression
                   | bitwise_expression ">>>" additive_expression
                   | bitwise_expression "&" additive_expression
                   | bitwise_expression "|" additive_expression
                   | bitwise_expression "^" additive_expression
                   ;

additive_expression = additive_expression "+" multiplicative_expression
                    | additive_expression "-" multiplicative_expression
                    | multiplicative_expression
                    ;

multiplicative_expression = multiplicative_expression "*" unary_expression
                    | multiplicative_expression "/" unary_expression
                    | multiplicative_expression "%" unary_expression
                    | unary_expression
                    ;

unary_expression = "~" primary_expression
                 |"-" primary_expression
                 | "!" primary_expression
                 | primary_expression "++"
                 | primary_expression "--"
                 | intrinsic_expression
                 | primary_expression
                 ;

intrinsic_expression = "@decltype" primary_expression
                     | "@dropref" complete_type
                     | "@dropmut" complete_type
                     | "@line"
                     ;

primary_expression = "(" expression ")"
                   | bool_literal
                   | int_literal
                   | real_literal
                   | string_literal
                   | identifier
                   | identifier "[" expression "]"
                   | identifier "(" [ expression { "," expression } ] ")"
                   ;

bool_literal = "true"
             | "false"
             ;

int_literal = digit { digit } ;

real_literal = digit { digit } "." { digit }
             | { digit } "." digit { digit }
             ;

string_literal = "\"" { character } "\"";

character = plain_character
          | escaped_character
          ;

plain_character = "\x20".."\x21"
                | "\x23".."\x5B"
                | "\x5D".."\x7D"
                ;

escaped_character = "\\" ( "\"" | "\\" | "n" | "t" | "r" ) ;

digit = "0".."9" ;

identifier = identifier_start { identifier_part } ;

identifier_start = "_"
                 | "A".."Z"
                 | "a".."z"
                 ;

identifier_part = identifier_start
                | digit
                ;
